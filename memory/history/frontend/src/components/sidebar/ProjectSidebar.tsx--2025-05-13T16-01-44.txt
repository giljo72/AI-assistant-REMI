import { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {
  Box,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Divider,
  IconButton,
  Typography,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Tooltip,
} from '@mui/material';
import {
  Add as AddIcon,
  Dashboard as DashboardIcon,
  Settings as SettingsIcon,
  Folder as FolderIcon,
  FolderOpen as FolderOpenIcon,
  ChevronRight as ChevronRightIcon,
  ExpandMore as ExpandMoreIcon,
} from '@mui/icons-material';
import { useProjects } from '../contexts/ProjectsContext';
import { Project } from '../types/Project';

const ProjectSidebar = () => {
  const { projectId } = useParams<{ projectId: string }>();
  const navigate = useNavigate();
  const { projects, addProject, loading } = useProjects();
  const [expandedProjects, setExpandedProjects] = useState<Record<string, boolean>>({});
  const [newProjectDialogOpen, setNewProjectDialogOpen] = useState(false);
  const [newProjectName, setNewProjectName] = useState('');

  useEffect(() => {
    // If a project is selected, expand it in the sidebar
    if (projectId) {
      setExpandedProjects((prev) => ({ ...prev, [projectId]: true }));
    }
  }, [projectId]);

  const handleProjectClick = (project: Project) => {
    navigate(`/projects/${project.id}`);
  };

  const toggleProjectExpand = (projectId: string, event: React.MouseEvent) => {
    event.stopPropagation();
    setExpandedProjects((prev) => ({
      ...prev,
      [projectId]: !prev[projectId],
    }));
  };

  const handleAddProject = async () => {
    if (newProjectName.trim()) {
      await addProject({ name: newProjectName.trim() });
      setNewProjectName('');
      setNewProjectDialogOpen(false);
    }
  };

  if (loading) {
    return (
      <Box sx={{ p: 2 }}>
        <Typography>Loading projects...</Typography>
      </Box>
    );
  }

  return (
    <Box
      sx={{
        width: 260,
        height: '100%',
        borderRight: '1px solid',
        borderColor: 'divider',
        bgcolor: 'background.paper',
      }}
    >
      <Box
        sx={{
          p: 2,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
        }}
      >
        <Typography variant="h6" component="div">
          Projects
        </Typography>
        <Tooltip title="Add Project">
          <IconButton
            size="small"
            color="primary"
            onClick={() => setNewProjectDialogOpen(true)}
            sx={{ 
              display: 'flex', 
              alignItems: 'center'
            }}
          >
            <AddIcon />
          </IconButton>
        </Tooltip>
      </Box>
      <Divider />
      <List>
        {projects.map((project) => (
          <ListItem key={project.id} disablePadding>
            <ListItemButton
              selected={projectId === project.id}
              onClick={() => handleProjectClick(project)}
            >
              <ListItemIcon>
                {expandedProjects[project.id] ? <FolderOpenIcon /> : <FolderIcon />}
              </ListItemIcon>
              <ListItemText primary={project.name} />