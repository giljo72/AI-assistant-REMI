import React, { useState } from 'react';
import { 
  Box, 
  List, 
  ListItem, 
  ListItemButton, 
  ListItemIcon, 
  ListItemText, 
  Typography, 
  Divider, 
  IconButton, 
  Collapse,
  useTheme,
  useMediaQuery
} from '@mui/material';
import {
  ChevronRight as ChevronRightIcon,
  ExpandMore as ExpandMoreIcon,
  Add as AddIcon,
  Settings as SettingsIcon,
  Folder as FolderIcon,
  Chat as ChatIcon,
  Delete as DeleteIcon,
  Edit as EditIcon
} from '@mui/icons-material';
import { useNavigate, useParams } from 'react-router-dom';
import { Project, Chat } from '../types';
import UserPromptsPanel from './UserPromptsPanel';

interface ProjectSidebarProps {
  projects: Project[];
  onCreateProject: () => void;
  onCreateChat: (projectId: string) => void;
  onDeleteProject?: (projectId: string) => void;
  onEditProject?: (project: Project) => void;
  onDeleteChat?: (chatId: string, projectId: string) => void;
  onEditChat?: (chat: Chat, projectId: string) => void;
  onOpenSettings: () => void;
}

const ProjectSidebar: React.FC<ProjectSidebarProps> = ({
  projects,
  onCreateProject,
  onCreateChat,
  onDeleteProject,
  onEditProject,
  onDeleteChat,
  onEditChat,
  onOpenSettings
}) => {
  const navigate = useNavigate();
  const { projectId, chatId } = useParams<{ projectId: string; chatId: string }>();
  const [expandedProjects, setExpandedProjects] = useState<Record<string, boolean>>({});
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const isTablet = useMediaQuery(theme.breakpoints.between('sm', 'md'));

  const toggleProjectExpand = (projectId: string) => {
    setExpandedProjects(prev => ({
      ...prev,
      [projectId]: !prev[projectId]
    }));
  };

  const handleChatClick = (projectId: string, chatId: string) => {
    navigate(`/projects/${projectId}/chats/${chatId}`);
  };

  // Determine font sizes based on screen size
  const getResponsiveFontSize = (base: number) => {
    if (isMobile) return base * 0.85;
    if (isTablet) return base * 0.9;
    return base;
  };

  // Determine icon sizes based on screen size
  const getIconSize = () => {
    if (isMobile) return 'small';
    return 'medium';
  };

  // Determine button padding based on screen size
  const getButtonPadding = () => {
    if (isMobile) return '6px 8px';
    if (isTablet) return '8px 12px';
    return '10px 16px';
  };

  return (
    <Box 
      sx={{ 
        width: '100%', 
        height: '100%', 
        display: 'flex', 
        flexDirection: 'column',
        bgcolor: 'background.paper',
        borderRight: 1,
        borderColor: 'divider',
        overflow: 'auto'
      }}
    >
      <Box 
        sx={{ 
          display: 'flex', 
          alignItems: 'center</div>